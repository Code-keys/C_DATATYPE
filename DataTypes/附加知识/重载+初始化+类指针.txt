class Circle
{
	double op;
	int width;
	int height;
public:
	Circle(){op = 5.0};/*默认初始化参数*/
	Circle(double r){op = r};/*修改初始化参数 像 python */

} 

/*
可以像往常一样将此类的构造函数定义为：Circle::Circle (int x, int y) { width=x; height=y; }

但是也可以使用成员初始化将其定义为：Circle::Circle (int x, int y) : width(x) { height=y; }

甚至：Circle::Circle (int x, int y) : width(x), height(y) { }  
*/

class Cylinder 
{
    Circle base;
    double height;
  public:
    Cylinder(double r, double h) : base (r), height(h) {}
    double volume() {return base.area() * height;}
};

int main(void)/*统一初始化*/
{
  Circle foo (10.0);   // functional form
  Circle bar = 20.0;   // assignment init.
  Circle baz {30.0};   // uniform init.
  Circle qux = {40.0}; // POD-like

  Cylinder multi（3.0,4.0）;
}




// pointer to classes example
#include <iostream>
using namespace std;

class Rectangle {
  int width, height;
public:
  Rectangle(int x, int y) : width(x), height(y) {}
  int area(void) { return width * height; }
};


int main() {
  Rectangle obj (3, 4);
  Rectangle * foo, * bar, * baz;
  foo = &obj;
  bar = new Rectangle (5, 6);
  baz = new Rectangle[2] { {2,5}, {3,6} };
  cout << "obj's area: " << obj.area() << '\n';
  cout << "*foo's area: " << foo->area() << '\n';
  cout << "*bar's area: " << bar->area() << '\n';
  cout << "baz[0]'s area:" << baz[0].area() << '\n';
  cout << "baz[1]'s area:" << baz[1].area() << '\n';       
  delete bar;
  delete[] baz;
  return 0;
}

